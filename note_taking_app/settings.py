"""
Django settings for note_taking_app project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Check if the environment is set (defaults to 'development' if not set)
ENVIRONMENT = os.getenv('DJANGO_ENV', 'development')


# Load the corresponding .env file based on the environment
dotenv_path = BASE_DIR / f".env.{ENVIRONMENT}"  # This loads either .env.development or .env.production
load_dotenv(dotenv_path)


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'your_default_secret_key')  # Fallback if not set


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

# Allowable hosts
ALLOWED_HOSTS = ['note-taker-jshi.onrender.com', 'localhost', '127.0.0.1']



# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',     # Django REST framework for building APIs
    'Notes',              # Your custom Notes app
    'taggit',             # For tagging notes (if used)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # WhiteNoise for static files -- MUST come after django.middleware.security.SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'note_taking_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Specify if you have custom template folders
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'note_taking_app.wsgi.application'


# Check what environment is set (default to 'development')
# We are using DJANGO_ENV to specify the current environment (e.g., development or production).
# If not specified, it defaults to 'development'.
ENVIRONMENT = os.getenv("DJANGO_ENV", "development")

# Load the corresponding .env file based on the environment (either .env.development or .env.production)
dotenv_path = BASE_DIR / f".env.{ENVIRONMENT}"  # This loads the appropriate .env file for the environment
load_dotenv(dotenv_path)


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
# Here we switch the database engine based on the environment.
# In development, we use SQLite, but in production, we use PostgreSQL.
import dj_database_url

if DEBUG:
    # Development uses SQLite (local development only)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',     # Local SQLite DB for development
            'NAME': BASE_DIR / 'db.sqlite3',  # Database file is located in the BASE_DIR
        }
    }
else:
    # Production uses PostgreSQL (or any other DB defined in DATABASE_URL)
    DATABASES = {
        'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))  # Production/Postgres DB, URL is in .env.production
    }

# Extra production-specific security settings
if not DEBUG:
    # Force secure headers when behind a proxy (e.g., Render or Heroku)
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    # CSRF settings: to prevent attacks on production, define trusted origins
    CSRF_TRUSTED_ORIGINS = ['https://note-taker-jshi.onrender.com']

    # Secure cookies for session and CSRF protection (recommended for production)
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    # XSS protection and content sniffing prevention
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
# These settings help enforce secure password policies
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static and Media Files
# https://docs.djangoproject.com/en/5.1/howto/static-files/
# These settings define how static files (like CSS/JS) and media files (uploads) are handled
STATIC_URL = 'static/'  # URL for static files
MEDIA_URL = '/media/'   # URL for uploaded media files
MEDIA_ROOT = BASE_DIR / 'media'  # Path to store uploaded media (e.g., user images)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Where collectstatic will copy static files for production

# WhiteNoise storage for better static file serving in production (optimized for performance)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
